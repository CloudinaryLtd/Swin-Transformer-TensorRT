#!/usr/bin/env python3
# Template auto-generated by polygraphy [v0.32.0] on 10/21/21 at 00:44:46
# Generation Command: /usr/local/bin/polygraphy run --trt bert_punct.engine --gen output.py
# This script runs /tmp/onnx_vs_trt_acc/bert_punct.engine using TensorRT.

from polygraphy.logger import G_LOGGER

from polygraphy.backend.common import BytesFromPath
from polygraphy.backend.trt import EngineFromBytes, TrtRunner
from polygraphy.backend.onnxrt import SessionFromOnnx, OnnxrtRunner
from polygraphy.comparator import Comparator, DataLoader
from polygraphy.common import TensorMetadata
import sys
import numpy as np

# TRT inputs
input_trt = np.load("./trt/test.npy")
input_onnx = input_trt

#Confirm that inputs are the same (despite different types)
for tensor_pair in [(input_trt,input_onnx)]:
  diff = np.subtract(tensor_pair[0],tensor_pair[1])
  diff = np.absolute(diff)
  print(diff.max())

# Loaders
load_engine_bytes = BytesFromPath('./weights/swin_tiny_patch4_window7_224_batch1_modifynW_fp16.engine')
deserialize_engine = EngineFromBytes(load_engine_bytes)

onnx_engine_bytes = BytesFromPath('./weights/swin_tiny_patch4_window7_224_batch1_modifynW.onnx')
onnx_session = SessionFromOnnx(onnx_engine_bytes)

trt_inputs = [{"input_0":input_trt}]

class OnnxLoader(DataLoader):

    def __init__(self):
        self.inputs = {"input_ids":input_onnx}
        input_metadata=TensorMetadata.from_feed_dict(self.inputs)
        super().__init__(
            iterations=1,
            input_metadata=input_metadata)

    def __getitem__(self,index):
      if (index==0):
        return self.inputs;
      else:
        raise IndexError('list index out of range')

onnx_inputs = OnnxLoader()

# Runners
trt_runners = [
    TrtRunner(deserialize_engine),
]
onnx_runners = [
    OnnxrtRunner(onnx_session)
]

# Runner Execution
trt_results = Comparator.run(trt_runners, trt_inputs)
onnx_results = Comparator.run(onnx_runners, onnx_inputs)

results = [trt_results[0], onnx_results[0]]
accuracy_result = Comparator.compare_accuracy(results)
print(accuracy_result)

success= True
if not accuracy_result:
    success= False

# Report Results
cmd_run = ' '.join(sys.argv)
if not success:
    G_LOGGER.finish("FAILED | Command: {}".format(cmd_run))
else:
    G_LOGGER.finish("PASSED | Command: {}".format(cmd_run))

